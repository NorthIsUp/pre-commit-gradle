[tool.poetry]
name = "pre_commit_gradle"
version = "0.3.2"
description = "Some custom gradle hooks for pre-commit."
long_description = "file: README.md"
url = "https://github.com/northisup/pre-commit-gradle"
license = "MIT"
packages = [{ include = "pre_commit_hooks" }]
authors = ["adam"]

[tool.poetry.dependencies]
python = "^3.8"
whichcraft = "^0.6.1"

[tool.poetry.dev-dependencies]
coverage = ""
mock = ""
pre-commit = ""
pytest = ""

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
gradle-check = "pre_commit_hooks.main:gradle_check_main"
gradle-build = "pre_commit_hooks.main:gradle_build_main"
gradle-spotless = "pre_commit_hooks.main:gradle_spotless_main"
gradle-task = "pre_commit_hooks.main:gradle_task_main"
gradle-detekt = "pre_commit_hooks.main:gradle_detekt_main"
gradlew-check = "pre_commit_hooks.main:gradlew_check_main"
gradlew-build = "pre_commit_hooks.main:gradlew_build_main"
gradlew-spotless = "pre_commit_hooks.main:gradlew_spotless_main"
gradlew-task = "pre_commit_hooks.main:gradlew_task_main"
gradlew-detekt = "pre_commit_hooks.main:gradlew_detekt_main"


[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true

[tool.coverage]
branch = true
source = ['.']
omit = ['.tox/*', '/usr/*', 'setup.py']

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "#\\s*pragma: no cover",

    # Don't complain if tests don't hit defensive assertion code:
    "^\\s*raise AssertionError\\b",
    "^\\s*raise NotImplementedError\\b",
    "^\\s*return NotImplemented\\b",
    "^\\s*raise$",

    # Don't complain if non-runnable code isn't run:
    "^if __name__ == ['\"]__main__['\"]:$",
]
show_missing = true
skip_covered = true

[tool.coverage.html]
directory = 'coverage-html'
